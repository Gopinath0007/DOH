// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package audittrail.proxies.constants;

import com.mendix.core.Core;

public class Constants
{
	// These are the constants for the AuditTrail module

	/**
	* If none of the members have been changed, this property determines whether a commit will still generate a log record populated only with the `changed date` and `changed by` fields.
	*/
	public static boolean getCreateLogObjectWithoutMemberChanges()
	{
		return (java.lang.Boolean)Core.getConfiguration().getConstantValue("AuditTrail.CreateLogObjectWithoutMemberChanges");
	}

	/**
	* This determines if the module should resolve calculated attributes and compare if the result has changed since the last commit.
	*/
	public static boolean getIncludeCalculatedAttributes()
	{
		return (java.lang.Boolean)Core.getConfiguration().getConstantValue("AuditTrail.IncludeCalculatedAttributes");
	}

	/**
	* This determines if the module should create a log line for every single member every time it initiates the Audit, or if it should only log the changed members.
	*/
	public static boolean getIncludeOnlyChangedAttributes()
	{
		return (java.lang.Boolean)Core.getConfiguration().getConstantValue("AuditTrail.IncludeOnlyChangedAttributes");
	}

	/**
	* This property only affects the scenario when IncludeOnlyChangedAttributes is false. This indicates if the application will create a log line for all attributes when the record is created (regardless of whether the value changed)
	*/
	public static boolean getLogAllMembersOnCreate()
	{
		return (java.lang.Boolean)Core.getConfiguration().getConstantValue("AuditTrail.LogAllMembersOnCreate");
	}

	/**
	* This constant determines the format to be used to convert date attributes to strings. It uses the same pattern as used by the Parse & Format Date Function Calls of Mendix (see https://docs.mendix.com/refguide/parse-and-format-date-function-calls).
	*/
	public static java.lang.String getLogLineDateFormat()
	{
		return (java.lang.String)Core.getConfiguration().getConstantValue("AuditTrail.LogLineDateFormat");
	}

	/**
	* This determines if the date should be audited in the **ServerTimeZone**. If both the session time zone and **ServerTimeZone** are enabled, you will see two dates in the audit overview.
	*/
	public static boolean getLogServerTimeZoneDateNotation()
	{
		return (java.lang.Boolean)Core.getConfiguration().getConstantValue("AuditTrail.LogServerTimeZoneDateNotation");
	}

	/**
	* This determines if the date should be audited in the session time zone of the user that makes the change. If both the session time zone and the server time zone are enabled, you will see two dates in the audit overview.
	*/
	public static boolean getLogSessionTimeZoneDateNotation()
	{
		return (java.lang.Boolean)Core.getConfiguration().getConstantValue("AuditTrail.LogSessionTimeZoneDateNotation");
	}

	/**
	* This the time zone in which the server time zone is printed. This will be a static time zone and should match the notation as used in Java.
	*/
	public static java.lang.String getServerTimeZone()
	{
		return (java.lang.String)Core.getConfiguration().getConstantValue("AuditTrail.ServerTimeZone");
	}
}