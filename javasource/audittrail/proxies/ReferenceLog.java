// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package audittrail.proxies;

public class ReferenceLog
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject referenceLogMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "AuditTrail.ReferenceLog";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Operation("Operation"),
		AttributeID("AttributeID"),
		ReferenceLog_LogLine("AuditTrail.ReferenceLog_LogLine");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public ReferenceLog(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "AuditTrail.ReferenceLog"));
	}

	protected ReferenceLog(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject referenceLogMendixObject)
	{
		if (referenceLogMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("AuditTrail.ReferenceLog", referenceLogMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a AuditTrail.ReferenceLog");

		this.referenceLogMendixObject = referenceLogMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'ReferenceLog.load(IContext, IMendixIdentifier)' instead.
	 */
	@java.lang.Deprecated
	public static audittrail.proxies.ReferenceLog initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return audittrail.proxies.ReferenceLog.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static audittrail.proxies.ReferenceLog initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new audittrail.proxies.ReferenceLog(context, mendixObject);
	}

	public static audittrail.proxies.ReferenceLog load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return audittrail.proxies.ReferenceLog.initialize(context, mendixObject);
	}

	public static java.util.List<audittrail.proxies.ReferenceLog> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<audittrail.proxies.ReferenceLog> result = new java.util.ArrayList<audittrail.proxies.ReferenceLog>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//AuditTrail.ReferenceLog" + xpathConstraint))
			result.add(audittrail.proxies.ReferenceLog.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * Set value of Operation
	 * @param operation
	 */
	public final audittrail.proxies.TypeOfReferenceLog getOperation()
	{
		return getOperation(getContext());
	}

	/**
	 * @param context
	 * @return value of Operation
	 */
	public final audittrail.proxies.TypeOfReferenceLog getOperation(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.Operation.toString());
		if (obj == null)
			return null;

		return audittrail.proxies.TypeOfReferenceLog.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of Operation
	 * @param operation
	 */
	public final void setOperation(audittrail.proxies.TypeOfReferenceLog operation)
	{
		setOperation(getContext(), operation);
	}

	/**
	 * Set value of Operation
	 * @param context
	 * @param operation
	 */
	public final void setOperation(com.mendix.systemwideinterfaces.core.IContext context, audittrail.proxies.TypeOfReferenceLog operation)
	{
		if (operation != null)
			getMendixObject().setValue(context, MemberNames.Operation.toString(), operation.toString());
		else
			getMendixObject().setValue(context, MemberNames.Operation.toString(), null);
	}

	/**
	 * @return value of AttributeID
	 */
	public final java.lang.String getAttributeID()
	{
		return getAttributeID(getContext());
	}

	/**
	 * @param context
	 * @return value of AttributeID
	 */
	public final java.lang.String getAttributeID(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.AttributeID.toString());
	}

	/**
	 * Set value of AttributeID
	 * @param attributeid
	 */
	public final void setAttributeID(java.lang.String attributeid)
	{
		setAttributeID(getContext(), attributeid);
	}

	/**
	 * Set value of AttributeID
	 * @param context
	 * @param attributeid
	 */
	public final void setAttributeID(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String attributeid)
	{
		getMendixObject().setValue(context, MemberNames.AttributeID.toString(), attributeid);
	}

	/**
	 * @return value of ReferenceLog_LogLine
	 */
	public final audittrail.proxies.LogLine getReferenceLog_LogLine() throws com.mendix.core.CoreException
	{
		return getReferenceLog_LogLine(getContext());
	}

	/**
	 * @param context
	 * @return value of ReferenceLog_LogLine
	 */
	public final audittrail.proxies.LogLine getReferenceLog_LogLine(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		audittrail.proxies.LogLine result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ReferenceLog_LogLine.toString());
		if (identifier != null)
			result = audittrail.proxies.LogLine.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ReferenceLog_LogLine
	 * @param referencelog_logline
	 */
	public final void setReferenceLog_LogLine(audittrail.proxies.LogLine referencelog_logline)
	{
		setReferenceLog_LogLine(getContext(), referencelog_logline);
	}

	/**
	 * Set value of ReferenceLog_LogLine
	 * @param context
	 * @param referencelog_logline
	 */
	public final void setReferenceLog_LogLine(com.mendix.systemwideinterfaces.core.IContext context, audittrail.proxies.LogLine referencelog_logline)
	{
		if (referencelog_logline == null)
			getMendixObject().setValue(context, MemberNames.ReferenceLog_LogLine.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ReferenceLog_LogLine.toString(), referencelog_logline.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return referenceLogMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final audittrail.proxies.ReferenceLog that = (audittrail.proxies.ReferenceLog) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "AuditTrail.ReferenceLog";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@java.lang.Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
